package Google.Places.API;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Scanner;

import com.google.maps.FindPlaceFromTextRequest;
import com.google.maps.GeoApiContext;
import com.google.maps.PlacesApi;
import com.google.maps.errors.ApiException;
import com.google.maps.model.LatLng;
import com.google.maps.model.PlaceDetails;
import com.google.maps.model.PlaceType;
import com.google.maps.model.PlacesSearchResponse;
import com.google.maps.model.PlacesSearchResult;

public class Main {	
	private static class ReviewDescComparator
			implements Comparator<PlaceDetails> {
		@Override
		public int compare(PlaceDetails pd1, PlaceDetails pd2) {
			return pd2.userRatingsTotal - pd1.userRatingsTotal;
		}
	}
	
	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);
		int mainMenuChoice, radius;
		String apiKey, input;
		
		System.out.print("Enter your API key: ");
		apiKey = scanner.nextLine();
			
		System.out.print("Enter a place: ");
		input = scanner.nextLine();
			
		// Note: converts to meters by multiplying by 1609
		System.out.print("Enter the search radius in miles (max 31): ");
		radius = Integer.parseInt(scanner.nextLine()) * 1609;
		
		GeoApiContext context = new GeoApiContext.Builder()
				.apiKey(apiKey).build();
		PlacesSearchResult[] results;
		try {
			results = PlacesApi.findPlaceFromText(context,
					input, FindPlaceFromTextRequest.InputType.TEXT_QUERY)
					.await().candidates;
			
			// Only grab first result, if it exists
			// then look the placeID up.
			if (results.length > 0) {
				String placeId = results[0].placeId;
				PlaceDetails details = PlacesApi.placeDetails(context, placeId)
						.await();
				LatLng location = details.geometry.location;
				
				// ArrayList of all results
				ArrayList<PlaceDetails> allPlaceDetails = new ArrayList<>();
				
				// Search nearby
				PlacesSearchResponse places = PlacesApi
						.nearbySearchQuery(context, location)
						.type(PlaceType.TOURIST_ATTRACTION).radius(radius)
						.await();
				boolean moreResults = false;
				do { 
					for (PlacesSearchResult psr : places.results) {
						placeId = psr.placeId;
						details = PlacesApi.placeDetails(context, placeId)
								.await();
						allPlaceDetails.add(details);
					}
					
					if (places.nextPageToken != null) {
						// Page token not valid right away
						Thread.sleep(4000);
						moreResults = true;
						places = PlacesApi.nearbySearchNextPage(context,
								places.nextPageToken).await();
					}
					else
						moreResults = false;
				} while (moreResults);

				// Sort by reviews descending
				Collections.sort(allPlaceDetails, new ReviewDescComparator());
			
				// Ask the user if they would like to go to each
				// places and make a list.
				ArrayList<PlaceDetails> destinations =
						new ArrayList<>();
				for (PlaceDetails pd : allPlaceDetails) {
					System.out.println();
					System.out.println("Would you like to go to the following"
							+ " place?");
					System.out.println(placeDetailsToString(pd));
					
					boolean yesNo;
					String s;
					do {
							System.out.print("(y/n or q to stop entering"
									+ " destinations): ");
							s = scanner.nextLine();
					} while (!s.equalsIgnoreCase("y") &&
							!s.equalsIgnoreCase("n") &&
							!s.equalsIgnoreCase("q"));
					
					if (s.equalsIgnoreCase("y")) {
						destinations.add(pd);
						System.out.println(pd.name + " added to destinations");
					}
					else if (s.equalsIgnoreCase("q")) {
						break;
					}
					System.out.println();
				}
				
				
			}
		} catch (ApiException | InterruptedException | IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private static String placeDetailsToString(PlaceDetails pd) {
		// Convert PlacesSearchResult to string
		StringBuilder result = new StringBuilder();
		// Add place name
		result = result.append(pd.name);
		
		// Add address
		if (pd.formattedAddress != null)
			result = result.append(": " + pd.formattedAddress + "\n");
		
		result = result.append("Number of ratings: " + pd.userRatingsTotal +
				" Rating: " + pd.rating + "\n");
		
		if (pd.website != null)
			result = result.append("More details: " + pd.website);
		
		return result.toString();
	}
	
	
}
